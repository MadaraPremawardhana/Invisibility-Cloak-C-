#include "opencv2/opencv.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <iostream>

using namespace std;
using namespace cv;

const char* keys = "{ video  | | Path to the input video file. Skip this argument to capture frames from a camera.}";

int main(int argc, char** argv) {

    VideoCapture cap(0);

    Mat img;
    Mat background;
    for (int i = 0; i < 60; i++)
    {
        cap >> background;
    }

    while (true)
    {
        Mat frame;
        cap >> frame;
        if (frame.empty())
            break;
        Mat hsv;

        cvtColor(frame, hsv, COLOR_RGB2HSV);

        Mat mask1, mask2;
        inRange(hsv, Scalar(30, 120, 70), Scalar(50, 255, 255), mask1);
        inRange(hsv, Scalar(50, 120, 70), Scalar(75, 255, 255), mask2);

        mask1 = mask1 + mask2;

        Mat kernel = Mat::ones(3, 3, CV_32F);
        morphologyEx(mask1, mask1, MORPH_OPEN, kernel);
        morphologyEx(mask1, mask1, MORPH_DILATE, kernel);

        bitwise_not(mask1, mask2);

        Mat res1, res2, final_output;
        bitwise_and(frame, frame, res1, mask2);
        bitwise_and(background, background, res2, mask1);
        addWeighted(res1, 1, res2, 1, 0, final_output);

        imshow("Magic !!!", final_output);

        char c = (char)waitKey(20);
        if (c == 27)
            break;
        frame.release(), hsv.release(), mask1.release(), mask2.release(), res1.release(), res2.release(), final_output.release();

    }

    cap.release();
    destroyAllWindows();

    return 0;
}
